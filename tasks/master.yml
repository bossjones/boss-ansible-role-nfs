---

######################################################################################
# nfs - common
######################################################################################

# FIXME: Come back to this, libnfsidmap2 is used on xenial ... libnfsidmap is debian
- name: Install NFS packages
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - nfs-common
    - nfs-kernel-server
    - libnfsidmap2

# SOURCE: https://help.ubuntu.com/community/SettingUpNFSHowTo
# NOTE: It's important that /export and /export/users have 777 permissions as we will be accessing the NFS share from the client without LDAP/NIS authentication. This will not apply if using authentication (see below). Now mount the real users directory with:
- name: create nfs share directories
  file:
    path: "{{ item.path }}"
    state: directory
    mode: 0777
  with_items: "{{ boss__nfs__nfs_exports }}"



######################################################################################
# nfs - server
######################################################################################

- debug: msg="NFS Server"

- name: enable services
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - rpcbind
    # - nfs-server
    - nfs-kernel-server

# root@nfs-master1:/etc/netdata# systemctl list-unit-files --type=service | grep nfs
# mountkernfs.service                        masked
# mountnfs-bootclean.service                 masked
# mountnfs.service                           masked
# nfs-blkmap.service                         static
# nfs-config.service                         static
# nfs-idmapd.service                         static
# nfs-kernel-server.service                  enabled
# nfs-mountd.service                         static
# nfs-server.service                         enabled
# nfs-utils.service                          static
# umountnfs.service                          masked

# root@nfs-master1:/etc/netdata# systemctl list-unit-files --type=service | grep rpc
# auth-rpcgss-module.service                 static
# rpc-gssd.service                           static
# rpc-statd-notify.service                   disabled
# rpc-statd.service                          disabled
# rpc-svcgssd.service                        static
# rpcbind.service                            enabled
# root@nfs-master1:/etc/netdata#

# - name: start services
#   service:
#     name: "{{ item }}"
#     state: started
#   with_items:
#     - rpc-statd
#     - nfs-idmapd

# - name: add NFS share to /etc/export
#   lineinfile:
#     dest: "/etc/exports"
#     regexp: "^{{ item.path }} "
#     line: "{{ item.path }} {{ item.export }}"
#     create: yes
#   with_items: "{{ boss__nfs__nfs_exports }}"
#   register: nfs_exports_result


- name: Copy exports file.
  template:
    src: exports.j2
    dest: /etc/exports
    owner: root
    group: root
    mode: 0644
  notify:
  - Run exportfs to export or unexport all directories
  - Restart nfs-kernel-server
  register: nfs_exports_result

# --------------------------------------------------------------------------------------
# --------------------------------[NFS SYSTEMD OVERRIDES]-------------------------------
# --------------------------------------------------------------------------------------

- name: Ensure systemd directory exists
  file:
    path: "/etc/systemd/system"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"

- name: Ensure /etc/default directory exists
  file:
    path: "/etc/default"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"

- name: Generate /etc/default/nfs-kernel-server file
  template:
    src: "etc/default/nfs-kernel-server.j2"
    dest: "/etc/default/nfs-kernel-server"
    owner: "root"
    group: "root"
    mode: "0644"
  notify:
  - Run exportfs to export or unexport all directories
  - Restart nfs-kernel-server
  register: boss__nfs__etc_default_nfs_kernel_server

- name: Ensure /etc/systemd/system/nfs-kernel-server.service.d directory exists
  file:
    path: "/etc/systemd/system/nfs-kernel-server.service.d"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"

- name: Generate systemd unit file
  template:
    src: "etc/systemd/system/nfs-kernel-server.service.j2"
    dest: "/etc/systemd/system/nfs-kernel-server.service"
    owner: "root"
    group: "root"
    mode: "0644"
  notify:
  - Run exportfs to export or unexport all directories
  - Restart nfs-kernel-server
  register: boss__nfs__nfs_register_systemd_service

- name: Configure custom systemd unit file override
  template:
    src: "etc/systemd/system/nfs-kernel-server.service.d/limits.conf.j2"
    dest: "/etc/systemd/system/nfs-kernel-server.service.d/limits.conf"
    owner: "root"
    group: "root"
    mode: "0644"
  notify:
  - Run exportfs to export or unexport all directories
  - Restart nfs-kernel-server
  register: boss__nfs__register_limits_override

- name: Reload systemd daemon
  systemd:
    daemon_reload: true
  when: (boss__nfs__nfs_register_conf_file|default() and
         boss__nfs__nfs_register_conf_file is changed)
         or (boss__nfs__register_limits_override|default() and
         boss__nfs__register_limits_override is changed)
  notify: ["Restart nfs-kernel-server"]

# SOURCE: https://raymii.org/s/tutorials/Ansible_-_Only_if_a_file_exists_or_does_not_exist.html
- name: stat /etc/systemd/system/nfs-kernel-server.service
  stat: path=/etc/systemd/system/nfs-kernel-server.service
  register: nfs_kernel_server_systemd_unit_file
  changed_when: False

- name: dump /etc/systemd/system/nfs-kernel-server.service
  command: 'cat /etc/systemd/system/nfs-kernel-server.service'
  when: nfs_kernel_server_systemd_unit_file.stat.exists == True
  changed_when: False

- name: Ensure nfs-kernel-server is running and enabled on boot.
  service: "name={{ boss__nfs__nfs_daemon }} state=started enabled=yes"

# --------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------



# In ansible playbooks, handlers (such as to restart a service) normally happen at the end of a run. If you need ansible to run a handler between two tasks, there is "flush_handlers".
- name: flush handlers
  meta: flush_handlers

# - name: Restart NFS server service
#   service:
#     name: nfs-server
#     state: restarted
#   when: nfs_exports_result|changed

# - name: Restart rpc-statd server service
#   service:
#     name: rpc-statd
#     state: restarted
#   when: nfs_exports_result|changed

# - name: enable firewalld for NFS Server
#   firewalld:
#     service: "{{ item }}"
#     zone: public
#     permanent: true
#     state: enabled
#   with_items:
#     - mountd
#     - rpc-bind
#     - nfs

######################################################################################
# nfs - client
######################################################################################
# - debug: msg="NFS Client"

# - name: enable services
#   service:
#     name: "{{ item }}"
#     state: started
#     enabled: yes
#   with_items:
#     - rpcbind

# - name: mount the NFS directories
#   mount:
#     name: "{{ item.path }}"
#     src: "{{ hostvars[groups[boss__nfs__nfs_server_group][0]]['ansible_' + boss__nfs__nfs_interface].ipv4.address }}:{{ item.remote }}"
#     state: "{{ item.state }}"
#     # fstype: nfs
#     fstype: "{{ item.fstype }}"
#     # fstab_entry: "_netdev,auto  0  0"
#     opts: "none    bind  0  0"
#   with_items: "{{ boss__nfs__nfs_exports }}"




