##############################################################################
# Install prereqs for perf/tools
##############################################################################
# # no_log: true
- hosts: servers
  vars:
    go_version: "1.10"
  gather_facts: True
  become: yes
  become_method: sudo
  tags:
    - prereqs
    - perf
    - perf_tools
    - tools
    - servers
  pre_tasks:

  - name: Set system architecture for AMD64/x86_64
    set_fact:
      sys_arch: "amd64"
    when: ansible_architecture is match("x86_64") or (ansible_architecture | lower) is match("amd64")

  - name: Set system architecture for i386/x86
    set_fact:
      sys_arch: "386"
    when: ansible_architecture is match("i386")

  - name: Set system architecture for ARM64
    set_fact:
      sys_arch: "arm64"
    when: ansible_architecture is match("arm64")

  - name: Set system architecture for ARMv7
    set_fact:
      sys_arch: "armv7"
    when: ansible_architecture is match("armv7.+")

  - name: Set system architecture for ARMv6
    set_fact:
      sys_arch: "armv6"
    when: ansible_architecture is match("armv6.+")

  - name: Set system architecture for ARMv5
    set_fact:
      sys_arch: "armv5"
    when: ansible_architecture is match("armv5.+")

  - name: Set system architecture for ansible var apt_arch
    set_fact:
      apt_arch: "{{sys_arch}}"

  - name: install go
    unarchive:
      src: 'https://storage.googleapis.com/golang/go{{ go_version }}.linux-{{ sys_arch }}.tar.gz'
      remote_src: yes
      dest: /usr/local
      mode: 0777
      creates: /usr/local/go/bin/go

  # export PATH=$PATH:/usr/local/go/bin:${HOME}/go/bin
  - name: set go env. vars. and add go to path
    blockinfile:
      dest: '$HOME/.bashrc'
      block: |
        export PATH=$PATH:/usr/local/go/bin
        export GOPATH=$HOME
      state: present
      create: yes
      mode: 0644
    become: '{{ item }}'
    with_items:
      - true  # Run as root
      - false # Run as SSH user

  # - name: source ~/.bashrc from ~/.bash_profile
  #   lineinfile:
  #     dest: '$HOME/.bash_profile'
  #     line: '[ -r $HOME/.bashrc ] && source $HOME/.bashrc'
  #     state: present
  #     create: yes
  #     mode: 0644
  #   become: '{{ item }}'
  #   with_items:
  #     - true  # Run as root
  #     - false # Run as SSH user

  - name: set fact env_go
    set_fact:
      env_go: '{{ env_go |default({}) | combine ({"PATH" : "/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/local/go/bin"  }) | combine ({"GOPATH" :"$HOME"}) }}'

  # # NOTE: fast way to switch between clusters and namespaces in kubectl
  # - name: install kubens - fast way to switch between clusters and namespaces in kubectl
  #   shell: |
  #     curl -L 'https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens' > /usr/local/bin/kubens
  #     chmod +x /usr/local/bin/kubens
  #   become: yes
  #   become_method: sudo
  #   args:
  #     executable: /bin/bash
  #     creates: /usr/local/bin/kubens

  - name: install fzy - A better fuzzy finder
    shell: |
      curl -L 'https://github.com/jhawthorn/fzy/releases/download/0.9/fzy_0.9-1_amd64.deb' > /usr/local/src/fzy_0.9-1_amd64.deb
      apt install -y /usr/local/src/fzy_0.9-1_amd64.deb
    become: yes
    become_method: sudo
    args:
      executable: /bin/bash
      creates: /usr/local/bin/fzy

#   wget https://github.com/jhawthorn/fzy/releases/download/0.9/fzy_0.9-1_amd64.deb
# $ sudo dpkg -i fzy_0.9-1_amd64.deb

  - name: "Install ubuntu-make"
    package:
      name: "{{ item }}"
      state: present
    with_items:
        - ubuntu-make

  - name: "Install prereq tools"
    package:
      name: "{{ item }}"
      state: present
    with_items:
        - nethogs
        - ccze
        - htop
        - silversearcher-ag
        - netcat
        - nmap
        - netperf
        - ngrep
        - unzip
        - nload
        - jq
        - ncdu
        - traceroute
        - sysstat
        # - ssldump
        # - sslsplit
        - conntrack
        # NOTE: RUN THIS GUY
        - mtr
        - tmux
        # SOURCE: https://www.tecmint.com/test-network-throughput-in-linux/
        - iperf3
        # SOURCE: https://www.tecmint.com/tcpflow-analyze-debug-network-traffic-in-linux/
        - tcpflow
        # SOURCE: https://www.tecmint.com/linux-network-bandwidth-monitoring-tools/
        - iftop

  # SOURCE: https://gist.github.com/kometchtech/c5681b2a70b30c99bf7e834ffb3abba5
  - name: "Install dnsperf prereqs"
    package:
      name: "{{ item }}"
      state: present
    with_items:
        - bind9utils
        - libbind-dev
        - libkrb5-dev
        - libssl-dev
        - libcap-dev
        - libxml2-dev
        - geoip-bin
        - libgeoip-dev
        - build-essential
        - curl
        # REQUIRED: https://www.tecmint.com/hegemon-system-monitoring-tool-for-linux/
        - libsensors4-dev

  - name: "Install python-deps"
    package:
      name: "{{ item }}"
      state: present
    with_items:
        - python3-dev
        - python-dev
        - python3-pip
        - python-pip

  - name: check if /usr/bin/sysdig exists
    stat:
      path: /usr/bin/sysdig
    register: sysdig_result
    failed_when: false
    changed_when: false
    tags:
      - slow

  - name: "SYSDIG: curl -s https://s3.amazonaws.com/download.draios.com/stable/install-sysdig | sudo bash ONLY if it is not installed already"
    shell: |
      bash -lc "curl -s https://s3.amazonaws.com/download.draios.com/stable/install-sysdig | sudo bash"
    args:
      executable: /bin/bash
    when: not sysdig_result.stat.exists
    tags:
      - slow

  # MORE TOOLS FROM: https://medium.com/@jonyeezs/my-minimal-over-powered-linux-setup-guide-710931efb75b

  - name: install fzf for root and default user
    shell: |
      git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
      ~/.fzf/install --all
    become: '{{ item }}'
    args:
      executable: /bin/bash
      creates: '$HOME/.fzf'
    with_items:
      - true  # Run as root
      - false
    tags:
    - fzf


  - name: install fzf for root and default user
    shell: |
      git clone https://github.com/b4b4r07/enhancd ~/.enhancd
    become: '{{ item }}'
    args:
      executable: /bin/bash
      creates: '$HOME/.enhancd'
    with_items:
      - true  # Run as root
      - false
    tags:
    - enhanced

# $ echo 'source ~/.enhancd/init.sh' >> ~/.zshrc
# $ echo 'ENHANCD_FILTER=fzy:fzf; export ENHANCD_FILTER' >> ~/.zshrc
# $ echo "ENHANCD_HOOK_AFTER_CD='ls -A';export ENHANCD_HOOK_AFTER_CD" >> ~/.zshrc

  - name: source ~/.enhancd/init.sh to root/ssh user bashrc
    lineinfile:
      path: '$HOME/.bashrc'
      line: 'source ~/.enhancd/init.sh'
      create: yes
    become: '{{ item }}'
    with_items:
      - true  # Run as root
      - false # Run as SSH user


  - name: "ENHANCD_FILTER=fzy:fzf; export ENHANCD_FILTER to root/ssh user bashrc"
    lineinfile:
      path: '$HOME/.bashrc'
      line: 'ENHANCD_FILTER=fzy:fzf; export ENHANCD_FILTER'
      create: yes
    become: '{{ item }}'
    with_items:
      - true  # Run as root
      - false # Run as SSH user

  - name: "ENHANCD_HOOK_AFTER_CD='ls -A';export ENHANCD_HOOK_AFTER_CD to root/ssh user bashrc"
    lineinfile:
      path: '$HOME/.bashrc'
      line: "ENHANCD_HOOK_AFTER_CD='ls -A';export ENHANCD_HOOK_AFTER_CD"
      create: yes
    become: '{{ item }}'
    with_items:
      - true  # Run as root
      - false # Run as SSH user

  - name: install tldr - Simplified and community-driven man pages
    shell: |
      curl -L 'https://raw.githubusercontent.com/raylee/tldr/master/tldr' > /usr/local/bin/tldr
      chmod +x /usr/local/bin/tldr
    become: yes
    become_method: sudo
    args:
      executable: /bin/bash
      creates: /usr/local/bin/tldr

  - name: install gkill - Interactice process killer for Linux and macOS
    shell: |
      curl -L 'https://github.com/heppu/gkill/releases/download/v1.0.2/gkill-linux-amd64' > /usr/local/bin/gkill
      chmod +x /usr/local/bin/gkill
    become: yes
    become_method: sudo
    args:
      executable: /bin/bash
      creates: /usr/local/bin/gkill

  # https://github.com/heppu/gkill/releases/download/v1.0.2/gkill-linux-amd64

  - name: install grv - GRV — Git Repository Viewer
    shell: |
      curl -L 'https://github.com/rgburke/grv/releases/download/v0.1.2/grv_v0.1.2_linux64' > /usr/local/bin/grv
      chmod +x /usr/local/bin/grv
    become: yes
    become_method: sudo
    args:
      executable: /bin/bash
      creates: /usr/local/bin/grv

  - name: Add repositories
    apt_repository:
      repo: 'ppa:dawidd0811/neofetch'
      state: present
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: "Install neofetch"
    package:
      name: "{{ item }}"
      state: present
    with_items:
        - neofetch

  - name: install tmux bash completion
    shell: |
      curl -L 'https://raw.githubusercontent.com/Bash-it/bash-it/master/completion/available/tmux.completion.bash' > /etc/bash_completion.d/tmux ;
    become: yes
    become_method: sudo
    args:
      executable: /bin/bash
      creates: /etc/bash_completion.d/tmux

  # https://raw.githubusercontent.com/Bash-it/bash-it/master/completion/available/tmux.completion.bash

  # $ sudo add-apt-repository ppa:dawidd0811/neofetch
  # $ sudo apt update && sudo apt install neofetch

  # Dockly
  # If you use Docker, here’s one for you. You get to see all your containers, their health and as well their logs. Check out their repo for a gif demo.
  # npm install -g dockly

  # env_go
  # ALL THESE TOOLS CAME FROM: https://medium.com/@jonyeezs/my-minimal-over-powered-linux-setup-guide-710931efb75b

  ##############################################################################
  # Install osquery
  ##############################################################################
  # $ export OSQUERY_KEY=1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B
  # $ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $OSQUERY_KEY
  # $ sudo add-apt-repository 'deb [arch=amd64] https://pkg.osquery.io/deb deb main'
  # $ sudo apt update
  # $ sudo apt install osquery


  # SOURCE: https://medium.com/@jonyeezs/my-minimal-over-powered-linux-setup-guide-710931efb75b
  # $ git clone https://github.com/b4b4r07/enhancd ~/.enhancd
  # $ echo 'source ~/.enhancd/init.sh' >> ~/.bashrc
  # $ echo 'ENHANCD_FILTER=fzy:fzf; export ENHANCD_FILTER' >> ~/.bashrc
  # $ echo "ENHANCD_HOOK_AFTER_CD='ls -A';export ENHANCD_HOOK_AFTER_CD" >> ~/.bashrc

  - name: Install cheat
    pip:
      name: "cheat"


  - name: install ~/.cheat for root and default user
    shell: |
      git clone https://github.com/bossjones/boss-cheatsheets ~/.cheat
      curl 'https://raw.githubusercontent.com/chrisallenlane/cheat/master/cheat/autocompletion/cheat.bash' > /etc/bash_completion.d/cheat ;
    become: '{{ item }}'
    args:
      executable: /bin/bash
      creates: '$HOME/.cheat'
    with_items:
      - true  # Run as root
      - false
    tags:
    - cheat

  - name: Install cheat
    pip:
      name: "cheat"

  # # https://github.com/nodesource/distributions/blob/master/README.md
  # - name: install node version v11.4.0
  #   shell: |
  #     curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -
  #     apt-get install -y nodejs
  #     apt-get install -y gcc g++ make
  #     npm install -g docker-loghose
  #     npm install -g docker-enter
  #   become: '{{ item }}'
  #   args:
  #     executable: /bin/bash
  #     creates: '/usr/bin/npm'
  #   with_items:
  #     - true  # Run as root
  #   tags:
  #   - node
  #   - npm

# TODO: Install


# SOURCE: https://github.com/iovisor/bcc/blob/master/INSTALL.md

# perf tools
# bcc

# FIXME: https://github.com/pypa/pip/issues/5240
# curl https://bootstrap.pypa.io/get-pip.py | python3
# pip2 install --upgrade pip

# sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4052245BD4284CDD
# echo "deb https://repo.iovisor.org/apt/$(lsb_release -cs) $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/iovisor.list
# sudo apt-get update
# sudo apt-get install bcc-tools libbcc-examples linux-headers-$(uname -r)

- name: 'Add an apt key by id from a keyserver - apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4052245BD4284CDD'
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: 4052245BD4284CDD
    state: present

# Add specified repository into sources list using specified filename.
- name: add bcc repo on xenial
  apt_repository:
    repo: deb https://repo.iovisor.org/apt/{{ansible_distribution_release}} {{ansible_distribution_release}} main
    state: present
    update_cache: yes
    filename: iovisor.list
  when: ansible_os_family == "Debian"

# - name: Add repositories
#   apt_repository:
#     repo: 'ppa:dawidd0811/neofetch'
#     state: present
#     update_cache: yes
#   when: ansible_os_family == "Debian"

- name: 'uname -r'
  shell: uname -r
  ignore_errors: yes
  failed_when: false
  changed_when: false
  register: uname_result

- debug: msg="{{ uname_result.stdout }}"

- name: "Install bcc"
  package:
    name: "{{ item }}"
    state: present
  with_items:
      - bcc-tools
      - libbcc-examples
      - "linux-headers-{{ uname_result.stdout }}"
